Act as a senior software developer. Using the attached documentation as your primary reference, design and develop a modern, TRANSCRIPT SYSTEM FOR A COLLEGE System strictly for use by COLLEGE administrators and students. Adhere to best coding practices, including clean architecture, modular structure, and reusable components.
Build the basic structure of the application first.

  you can use the already existing database migration files, models, seeders and controllers, and web routes

✅ SYSTEM OVERVIEW:
Create a full-featured Transcript Management System that enables the admin to manage student academic records, including personal details, academic results by semester, and transcript generation. The admin must be able to upload bulk transcripts via Excel and generate downloadable PDFs for each student.

Menu Structure
1. Dashboard
2. STUDENTS
3. TRANSCRIPT
4. UPLOAD
5. Report
6. Settings

Theme colors: Use gradient BLUE and black, and white colors.





 1.1 Member Profile System
- Personal Information Management
  - Contact details (phone, email, address)
  - Emergency contacts
  - Profile photo management
  
 

 
 2. Technical Implementation
 2.1 Frontend Architecture

- HTML5/Tailwind CSS/JavaScript
  - Responsive design
  - Component-based structure
  - Progressive web app
  - Cross-browser compatibility
  - Accessibility compliance

2.2 Backend Architecture
- PHP Laravel Framework
  - MVC architecture
  - RESTful API design
  - Service layer
  - Repository pattern
  - Event-driven architecture

2.3 Database Design (MySQL)
- Optimized Schema
  - Normalized tables
  - Indexed queries
  - Stored procedures
  - Transaction management
  - Data partitioning

2. Security Implementation
2.1 Authentication System
- Multi-layer Security
  - Role-based access control
  - Two-factor authentication
  - Password policies
  - Session management
  - Login attempt monitoring

2.2 Data Protection
- Security Measures
  - Data encryption at rest
  - SSL/TLS encryption
  - Regular backups
  - Data retention policies
  - GDPR compliance

2.3 Application Security
- Security Features
  - Input validation
  - XSS protection
  - CSRF protection
  - SQL injection prevention
  - API security

2.4 Audit System
- Activity Tracking
  - User action logs
  - System changes
  - Access logs
  - Error logging
  - Security incident tracking

3. Reporting and Analytics
 3.1 Dashboard System
- Interactive Dashboards
  - Customizable widgets
  - Real-time updates
  - Data visualization
  - Export capabilities
  - Drill-down analysis

3.2 Analytics Engine
- Data Analysis
 
 